type Query {
  hotels(latitude: Float!, longitude: Float!): [Hotel!]
  hotel(id: Int!): Hotel!
  reviews(id: Int!): [Review!]
}

type Mutation {
  createHotel(data: CreateHotelInput): Hotel!
  createHotelTariff(data: CreateHotelTariffInput): Tariff!
  createHotelReview(data: CreateHotelReviewInput): Review!
}

type Hotel {
  id:        ID!
  createdAt: String!
  updatedAt: String!
  name:      String!
  address:   String!
  rating:    Float!
  phone:     String!
  email:     String!
  latitude:  Float!
  longitude: Float!
  country:   String!
  pincode:   String!
  checkIn:   Int!
  checkOut:  Int!
  tariffs:   [Tariff!]
  reviews:   [Review!]
  amenities: Amenities
}

type Tariff {
  id:        ID!
  createdAt: String!
  updatedAt: String!
  hotelId:   Int!
  roomType:  String!
  tariff:    Float!
}

type Review {
  id:        ID!
  createdAt: String!
  updatedAt: String!
  hotelId:   Int!
  reviewer:  String!
  comment:   String!
  rating:    Int!
}

type Amenities {
  id:           ID!
  createdAt:    String!
  updatedAt:    String!
  hotelId:      Int!
  wifi:         Boolean!
  roomService:  Boolean!
  locker:       Boolean!
  swimmingPool: Boolean!
  giftShops:    Boolean!
}

enum RoomType {
  DELUX
  SINGLE
  EXECUTIVE
  PREMIUM_DOUBLE
}

input CreateHotelInput {
  name:         String!
  address:      String!
  rating:       Float!
  phone:        String!
  email:        String!
  latitude:     Float!
  longitude:    Float!
  country:      String!
  pincode:      String!
  checkIn:      Int!
  checkOut:     Int!
  wifi:         Boolean!
  roomService:  Boolean!
  locker:       Boolean!
  swimmingPool: Boolean!
  giftShops:    Boolean!
}

input CreateHotelTariffInput {
  hotel: Int!
  roomType: RoomType!
  tariff: Float!
}

input CreateHotelReviewInput {
  hotel: Int!
  reviewer:  String!
  comment:   String!
  rating:    Int!
}
